.libPaths("C:/Felipe/R_Library/library")
# load libraries
library(Hmisc)
library(soilDB)
library(plyr)
library(raster)
#
library(plyr)
library(raster)
library(foreign)
# load exported gSSURGO chunk, cell values are NOT map unit keys
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\GgsrugoPATIFF.tif')
r
getValues(r,33204/2)
hist(r)
str(getValues(r,33204/2))
.libPaths("C:/Felipe/R_Library/library")
# load libraries
library(Hmisc)
library(soilDB)
library(plyr)
library(raster)
library(plyr)
library(raster)
library(foreign)
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\GgsrugoPATIFF.tif')
# generate a RAT via raster package functionality
r <- ratify(r)
r
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\GgsrugoPATIFF.tif')
r
levels(r)
str(r)
hasValues(r)
inMemory(r)
cellStats(r,'mean')
warnings
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\GgsrugoMahatangoTIFF.tif')
r
hist(r)
# generate a RAT via raster package functionality
r <- ratify(r)
res(r)
r <- raster(ncol=36,nrow=18)
r[] <- NA
r[306] <- 1
b <- direction(r)
#plot(b)
plot(b)
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\GgsrugoMahatangoTIFF.tif')
# generate a RAT via raster package functionality
r <- ratify(r)
cellStats(r,"mean")
plot(r)
plot(r)
r <- ratify(r)
r
levels(r)
##### Using TAUDEM within R and System scripts function
##### the script was taken from the TAUDEM website
##### http://hydrology.usu.edu/taudem/taudem5/TauDEMRScript.txt
##### Felipe Montes 10 10 2016
#  R script to run TauDEM
# Packages used
# install rgdal
# install raster
# install shapefiles
install.packages("rgdal")
install.packages("raster")
install.packages("shapefiles")
.libPaths("C:/Felipe/R_Library/library")
libPaths("C:/Felipe/R_Library/library")
# Packages used
# install rgdal
# install raster
# install shapefiles
install.packages("rgdal")
install.packages("raster")
install.packages("shapefiles")
# This also assumes that MPICH2 is properly installed on your machine and that TauDEM command line executables exist
# MPICH2.  Obtain from http://www.mcs.anl.gov/research/projects/mpich2/
# Install following instructions at http://hydrology.usu.edu/taudem/taudem5.0/downloads.html.
# It is important that you install this from THE ADMINISTRATOR ACCOUNT.
# TauDEM command line executables.
# If on a PC download from http://hydrology.usu.edu/taudem/taudem5.0/downloads.html
# The install package will install to c:\program files\taudem or c:\program files (x86)\taudem set a
# system path.  If you want to do this manually you can download the command line executables and place where you wish.
# If on a different system, download the source code and compile for your system.
library(raster)
library(shapefiles)
.libPaths("C:/Felipe/R_Library/library")
# function for computing profile-total water storage
co.sum.whc <- function(i) {
wt <- i$comppct_r[1] # keep the first component pct (they are all the same)
thick <- with(i, hzdepb_r - hzdept_r) # compute horizon thickness
whc <- thick * i$awc_r # compute water storage by horizon
whc.total <- sum(whc, na.rm=TRUE) # sum to get profile water storage
data.frame(whc=whc.total, wt=wt) # return profile water storage and component pct
}
# function for computing weighted-mean whc within a map unit
mu.mean.whc <- function(i) {
whc <- wtd.mean(i$whc, weights=i$wt) # safely compute wt. mean water storage
data.frame(whc=whc) # return wt. mean water storage
}
# load libraries
library(Hmisc)
library(soilDB)
library(plyr)
library(raster)
# load chunk of gSSURGO
gSSURGO.chunk <- ratify(gSSURGO.chunk, count=TRUE)
# save RAT to new object, will use later
rat <- levels(gSSURGO.chunk)[[1]]
# extract the map unit keys from the RAT, and format for use in an SQL IN-statement
in.statement <- format_SQL_in_statement(rat$ID)
rat <- levels(gSSURGO.chunk)[[1]]
data(gSSURGO.chunk, package='soilDB')
# convert into a raster + RAT
gSSURGO.chunk <- ratify(gSSURGO.chunk, count=TRUE)
str(gSSURGO.chunk)
gSSURGO.chunk
gSSURGO.chunk)[[1]]
gSSURGO.chunk[[1]]
str(gSSURGO.chunk)
gSSURGO.chunk@values
freq(gSSURGO.chunk)
hist(gSSURGO.chunk)
getValues(gSSURGO.chunk)
in.statement <- format_SQL_in_statement(rat$ID)
levels(gSSURGO.chunk)
rat <- levels(gSSURGO.chunk)[[1]]
# extract the map unit keys from the RAT, and format for use in an SQL IN-statement
in.statement <- format_SQL_in_statement(rat$ID)
# format query in SQL- raw data are returned
q <- paste("SELECT component.mukey, component.cokey, compname, comppct_r, hzdept_r, hzdepb_r, hzname, awc_r
FROM component JOIN chorizon ON component.cokey = chorizon.cokey
AND mukey IN ", in.statement, "ORDER BY mukey, comppct_r DESC, hzdept_r ASC", sep="")
# now get component and horizon-level data for these map unit keys
res <- SDA_query(q)
# check first 6 rows, looks good
head(res, 6)
# aggregate by component, retaining map unit keys
co.whc <- ddply(res, c('mukey', 'cokey'), co.sum.whc)
# aggregate by map unit
mu.whc <- ddply(co.whc, 'mukey', mu.mean.whc)
# check: there should be a single water storage value per map unit key
head(mu.whc)
# change first colum name from 'mukey' to 'ID', so that it matches our RAT
names(mu.whc)[1] <- 'ID'
# combine RAT with aggregate data via "left" join
rat.new <- join(rat, mu.whc, type='left')
# put modified RAT back into our raster object
levels(gSSURGO.chunk) <- rat.new
# convert into standard raster based on new column
r.new <- deratify(gSSURGO.chunk, att='whc')
# check: OK
plot(r.new)
library(plyr)
library(raster)
library(foreign)
# load exported gSSURGO chunk, cell values are NOT map unit keys
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG11.tif')
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG11.tiff')
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG11.tif') ;
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
r <- ratify(r)
rat <- levels(r)[[1]]
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf', as.is=TRUE)
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf')  ;
names(mu)[1] <- 'ID'
str(mu)
names(mu)
# convert map unit keys from character to integer
mu$MUKEY <- as.integer(mu$MUKEY)
str(mu)
mu$MUKEY <- as.integer(mu$MUKEY)
str(mu)
str(mu$MUKEY)
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
# generate a RAT via raster package functionality
r <- ratify(r)
# extract RAT to a data.frame
rat <- levels(r)[[1]]
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf')  ;
# re-name the first coulmn to match our new RAT
names(mu)[1] <- 'ID'
str(mu)
names(mu)[1] <- 'ID'
str(mu)
names(mu)
mu$values
mu$Value
mu$header
mu$ID
str(mu)
names(mu)
library(plyr)
library(raster)
library(foreign)
# load exported gSSURGO chunk, cell values are NOT map unit keys
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
# generate a RAT via raster package functionality
r <- ratify(r)
# extract RAT to a data.frame
str(r)
levels(r)
rat <- levels(r)[[1]]
rat
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf',header=FALSE)  ;
# re-name the first coulmn to match our new RAT
str(mu)
# re-name the first coulmn to match our new RAT
names(mu)
mu$dbf
names(mu)[1] <- 'ID'
str(mu)
str(mu$MUKEY)
mu$MUKEY <- as.integer(mu$MUKEY)
mu$MUKEY <- as.integer(mu$MUKEY)
str(mu$MUKEY)
str(mu)
# join map unit keys to gSSURGO integer indices
rat.new <- join(rat, mu, by='ID', type='left')
names(mu)[1] <- 'ID'
names(mu)
mu$MUKEY
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
# generate a RAT via raster package functionality
r <- ratify(r)
str(r)
levels(r)
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf',header=FALSE)  ;
str(mu)
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
# generate a RAT via raster package functionality
r <- ratify(r)
# extract RAT to a data.frame
rat <- levels(r)[[1]]
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG11.tif.vat.dbf', as.is=TRUE)
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf', as.is=TRUE)
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf',header=F) ;
str(mu)
names(mu)
names(mu$dbf)
names(mu$dbf)[1]<-"ID"
names(mu$dbf)
mu$dbf$MUKEY<-as.integer(mu$dbf$MUKEY)
mu$dbf$MUKEY
r <- ratify(r)
# extract RAT to a data.frame
rat <- levels(r)[[1]]
# load ESRI-specific RAT, generated when gSSURGO was exported
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf',header=F) ;
# re-name the first coulmn to match our new RAT
names(mu)[1] <- 'ID'
source('C:/Felipe/PIHM-CYCLES/PIHM/PIHM_R_Scripts/AQPPracticeGssurgo.R')
install.packages("raster", dep = TRUE)
install.packages("Hmisc", dep = TRUE)
install.packages("soilDB", repos = "http://R-Forge.R-project.org")
install.packages("plyr", dep = TRUE)
install.packages("soilDB", dep = TRUE)
install.packages("foreign")
install.packages("plyr", dep = TRUE)
install.packages("soilDB", dep = TRUE)
install.packages("foreign")
##### Working with the Package AQP #######
##### http://ncss-tech.github.io/AQP/soilDB/gSSURGO-SDA.html#####
#### Felipe Montes 2016 09 09 #############
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/R_Library/library")
###########    Program to import and compare weather data from Hydroterre, PIHM and SWAT
###########
###########    Felipe Montes 2015 09 22
#      set the working directory
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\RScripts");
#      set the path to the library where packages are installed
.libPaths("C:/Felipe/R_Library/library")
##########   Read Weather files from SWAT output     #####################
#   save the path for the SWAT data directory
SWAT.data.dir<-c("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_forPIHM_11jun2015\\Weather\\Weather_from1981\\")
#  lkup_we38hmd.txt  to obtain Latitude, Longitude and elevation
SWAT.header<-read.csv(paste0(SWAT.data.dir,"lkup_we38hmd.txt")) [,c("LAT", "LONG" ,  "ELEVATION")]  ;
#   read the relative humidity  "hmd" time series starting date, the data series, create the time stamp for the series and add it to the time series
# get the dimensions of the "pcp" data
pcp.dim<-dim(read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T)) ;
SWAT.Date.start<-read.table (paste0(SWAT.data.dir,"we38pcp.txt"),header = F, nrows=1) ;
SWAT.Date.start.Posix<-as.Date(as.character(SWAT.Date.start),format="%Y%m%d") ;
SWAT.Data<-read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T,col.names = c("pcp"))*10 ;
SWAT.Data$DateTime<-seq(SWAT.Date.start.Posix, by = "day", length.out = pcp.dim [1]) ;
# Read the flow output at the watershed gage in cubic meters per second cms. This is the format that was chosen for the STEWARDS watershed database
Flow<-read.csv('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_Monitored\\WE38DailyFlow.csv', header=F, as.is=T, col.names=c("PAMCWE38", "Date","Flow_cms","","Comment") ) ;
Flow$Flow_cms<-as.numeric(Flow$Flow_cms) ;
Flow$DatePosix<-as.POSIXct(Flow$Date, format="%m/%e/%Y") ;
Flow$DatePosix<-format(Flow$DatePosix,format="%Y-%m-%d %H:%M:%S" ) ;
SWAT.Data$DateTime<-format(SWAT.Data$DateTime,format="%Y-%m-%d %H:%M:%S")  ;
Flow.Data<-merge(SWAT.Data[,c("DateTime","pcp")],Flow[Flow$DatePosix >= SWAT.Date.start.Posix ,c("DatePosix","Flow_cms")], by.x="DateTime", by.y="DatePosix");
Flow.Data$DateTime<-as.POSIXct(Flow.Data$DateTime) ;
###### PLot a hydrograph together with a hyetograph using the package EcoHydrology and the function hydrograph
library(EcoHydRology) ;
hydrograph(Flow.Data,P.units="mm", S.units="cms",S1.col="blue") ;
title(main="WE38")
###### Plot the Hyetograph together with a hyetograph by hand and more flexible, based on the R Water Module 3
#  https://web.ics.purdue.edu/~vmerwade/rwater.html
###### set the graphical parameters right for creating the hyetograph
#There are a lof of NA values in the data set
Flow.Data.NA<-Flow.Data[is.na(Flow.Data$pcp)|is.na(Flow.Data$Flow_cms),]
# mar :A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.
par(mar=c(3,5,1,4)+0.1);
# find the range of values to be plotted
pcp.range<-range(Flow.Data$pcp) ;
flow.range<-range(Flow.Data$Flow_cms[!is.na(Flow.Data$Flow_cms)]);
DateTime.range<-range(Flow.Data$DateTime);
#  plot the pcp
plot(Flow.Data$DateTime, Flow.Data$pcp, type="h",yaxt="n",xaxt="n", ylim=rev(c(0,4*pcp.range[2])), bty="n", main="WE38",col="light blue",ylab=NA);
# add axis with proper labeling
axis(side = 3, pos = 0, tck = 0,xaxt = "n") ;
axis(side = 4, at = pretty(seq(0, floor(pcp.range[2] + 1),length=c(5))),labels=pretty(seq(0, floor(pcp.range[2] + 1),length=c(5)))) ;
mtext(side=4,paste(names(Flow.Data)[2],"mm"),line = 2, cex = 0.9, adj = 1) ;
#add flow  plot
par(new=T);
plot(Flow.Data$DateTime,Flow.Data$Flow_cms, type='l',col="blue",axes=FALSE,yaxt="n", ylab="flow cms",xlab="date", ylim =c(0, 1.2*flow.range[2]));
#add axis with appropriate labels
axis(side = 1, at=seq(DateTime.range[1],DateTime.range[2],length.out=10),labels=format(seq(DateTime.range[1],DateTime.range[2],length.out=10),"%d-%b-%y")) ;
axis(side=2,at=pretty(seq(0,floor(flow.range[2]+1),length=10))) ;
#add aditional flow data
lines(River.DateTime,River[,3],col="red")
###########   Import the data from PIHM outputs    ##################
#  C:\Felipe\PIHM-CYCLES\PIHM\PIHM_Felipe\CNS\WE-38\PIHMOutputs\WE38.1509261543\WE38.rivFlx1.txt
River<-read.table("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\PIHMOutputs\\WE38.1509261543\\WE38.rivFlx1.txt", header=F, as.is=T, nrows=500);
River.DateTime<-as.POSIXct(River[,1],format="%Y-%m-%d %H:%M") ;
plot(River.DateTime,River[,3],type='l',ylim=c(-1,10));
for (i in seq(2,dim(River)[2])) {
points(River.DateTime,River[,i],type='l',col=i ) ;
}
############## Create the flow duration curve for calibration   ##############
####### Sorting the Flow_cms data from the Flow.Data File
ordered.Flow.Data<-Flow.Data[with(Flow.Data,order(Flow_cms,na.last=T,decreasing = T)),] ;
###### Normalization factor =  total days with flow values different than na
Normalization.time<-dim(ordered.Flow.Data)[1]- sum(is.na(ordered.Flow.Data$Flow_cms)) ;
ordered.Flow.Data$Rank<-seq(1:dim(ordered.Flow.Data)[1]) ;
ordered.Flow.Data$Prob.exced<-ordered.Flow.Data$Rank/Normalization.time ;
### Plot the flow Duration Curve for the whole period
plot(ordered.Flow.Data$Prob.exced,ordered.Flow.Data$Flow_cms,log="y",col="red");
head(ordered.Flow_cms)
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
install.packages('raster', dep=TRUE)
install.packages('plyr', dep=TRUE)
install.packages('Hmisc', dep=TRUE)
install.packages('soilDB', dep=TRUE) # stable version from CRAN + dependencies
install.packages("soilDB", repos="http://R-Forge.R-project.org") # most recent copy from r-forge
install.packages("SSOAP", repos = "http://www.omegahat.org/R", type="source") # SSOAP and XMLSchema
install.packages("foreign")
# load libraries
library(Hmisc)
library(soilDB)
library(plyr)
library(raster)
data(gSSURGO.chunk, package='soilDB')
gSSURGO.chunk <- ratify(gSSURGO.chunk, count=TRUE)
rat <- levels(gSSURGO.chunk)[[1]]
in.statement <- format_SQL_in_statement(rat$ID)
res <- SDA_query(q)
head(res, 6)
res <- SDA_query(q)
library(aqp)
res <- SDA_query(q)
q
q
q <- paste("SELECT component.mukey, component.cokey, compname, comppct_r, hzdept_r, hzdepb_r, hzname, awc_r
FROM component JOIN chorizon ON component.cokey = chorizon.cokey
AND mukey IN ", in.statement, "ORDER BY mukey, comppct_r DESC, hzdept_r ASC", sep="")
q
res <- SDA_query(q)
head(res, 6)
co.whc <- ddply(res, c('mukey', 'cokey'), co.sum.whc)
library(plyr)
library(raster)
library(foreign)
r <- raster('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif') ;
r <- ratify(r)
rat <- levels(r)[[1]]
rat
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf',header=F) ;
mu <- read.dbf('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\Manhantango\\gssurgo_g_pa\\GSSURGO_PA_TIFF\\MahatangoGSSG1.tif.vat.dbf') ;
head(mu)
###########    Program to import and compare weather data from Hydroterre, PIHM and SWAT
###########
###########    Felipe Montes 2015 09 22
#      set the working directory
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\RScripts");
#      set the path to the library where packages are installed
.libPaths("C:/Felipe/R_Library/library")
##########   Read Weather files from SWAT output     #####################
#   save the path for the SWAT data directory
SWAT.data.dir<-c("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_forPIHM_11jun2015\\Weather\\Weather_from1981\\")
#  lkup_we38hmd.txt  to obtain Latitude, Longitude and elevation
SWAT.header<-read.csv(paste0(SWAT.data.dir,"lkup_we38hmd.txt")) [,c("LAT", "LONG" ,  "ELEVATION")]  ;
#   read the relative humidity  "hmd" time series starting date, the data series, create the time stamp for the series and add it to the time series
# get the dimensions of the "pcp" data
pcp.dim<-dim(read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T)) ;
SWAT.Date.start<-read.table (paste0(SWAT.data.dir,"we38pcp.txt"),header = F, nrows=1) ;
SWAT.Date.start.Posix<-as.Date(as.character(SWAT.Date.start),format="%Y%m%d") ;
SWAT.Data<-read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T,col.names = c("pcp"))*10 ;
SWAT.Data$DateTime<-seq(SWAT.Date.start.Posix, by = "day", length.out = pcp.dim [1]) ;
# Read the flow output at the watershed gage in cubic meters per second cms. This is the format that was chosen for the STEWARDS watershed database
Flow<-read.csv('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_Monitored\\WE38DailyFlow.csv', header=F, as.is=T, col.names=c("PAMCWE38", "Date","Flow_cms","","Comment") ) ;
Flow$Flow_cms<-as.numeric(Flow$Flow_cms) ;
Flow$DatePosix<-as.POSIXct(Flow$Date, format="%m/%e/%Y") ;
Flow$DatePosix<-format(Flow$DatePosix,format="%Y-%m-%d %H:%M:%S" ) ;
SWAT.Data$DateTime<-format(SWAT.Data$DateTime,format="%Y-%m-%d %H:%M:%S")  ;
Flow.Data<-merge(SWAT.Data[,c("DateTime","pcp")],Flow[Flow$DatePosix >= SWAT.Date.start.Posix ,c("DatePosix","Flow_cms")], by.x="DateTime", by.y="DatePosix");
Flow.Data$DateTime<-as.POSIXct(Flow.Data$DateTime) ;
library(EcoHydRology) ;
.libPaths("C:/Felipe/R_Library/library")
###### PLot a hydrograph together with a hyetograph using the package EcoHydrology and the function hydrograph
install.packages('EcoHydrology')
###### PLot a hydrograph together with a hyetograph using the package EcoHydrology and the function hydrograph
install.packages('EcoHyRrology')
library(EcoHydRology) ;
hydrograph(Flow.Data,P.units="mm", S.units="cms",S1.col="blue") ;
title(main="WE38")
Flow.Data.NA<-Flow.Data[is.na(Flow.Data$pcp)|is.na(Flow.Data$Flow_cms),]
par(mar=c(3,5,1,4)+0.1);
pcp.range<-range(Flow.Data$pcp) ;
flow.range<-range(Flow.Data$Flow_cms[!is.na(Flow.Data$Flow_cms)]);
DateTime.range<-range(Flow.Data$DateTime);
#  plot the pcp
plot(Flow.Data$DateTime, Flow.Data$pcp, type="h",yaxt="n",xaxt="n", ylim=rev(c(0,4*pcp.range[2])), bty="n", main="WE38",col="light blue",ylab=NA);
axis(side = 3, pos = 0, tck = 0,xaxt = "n") ;
axis(side = 4, at = pretty(seq(0, floor(pcp.range[2] + 1),length=c(5))),labels=pretty(seq(0, floor(pcp.range[2] + 1),length=c(5)))) ;
mtext(side=4,paste(names(Flow.Data)[2],"mm"),line = 2, cex = 0.9, adj = 1) ;
#add flow  plot
par(new=T);
plot(Flow.Data$DateTime,Flow.Data$Flow_cms, type='l',col="blue",axes=FALSE,yaxt="n", ylab="flow cms",xlab="date", ylim =c(0, 1.2*flow.range[2]));
#add axis with appropriate labels
axis(side = 1, at=seq(DateTime.range[1],DateTime.range[2],length.out=10),labels=format(seq(DateTime.range[1],DateTime.range[2],length.out=10),"%d-%b-%y")) ;
axis(side=2,at=pretty(seq(0,floor(flow.range[2]+1),length=10))) ;
#add aditional flow data
lines(River.DateTime,River[,3],col="red")
River<-read.table("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\PIHMOutputs\\WE38.1509261543\\WE38.rivFlx1.txt", header=F, as.is=T, nrows=500);
River.DateTime<-as.POSIXct(River[,1],format="%Y-%m-%d %H:%M") ;
plot(River.DateTime,River[,3],type='l',ylim=c(-1,10));
for (i in seq(2,dim(River)[2])) {
points(River.DateTime,River[,i],type='l',col=i ) ;
}
ordered.Flow.Data<-Flow.Data[with(Flow.Data,order(Flow_cms,na.last=T,decreasing = T)),] ;
Normalization.time<-dim(ordered.Flow.Data)[1]- sum(is.na(ordered.Flow.Data$Flow_cms)) ;
ordered.Flow.Data$Rank<-seq(1:dim(ordered.Flow.Data)[1]) ;
###########    Program to import and compare weather data from Hydroterre, PIHM and SWAT
###########
###########    Felipe Montes 2015 09 22
#      set the working directory
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\RScripts");
#      set the path to the library where packages are installed
.libPaths("C:/Felipe/R_Library/library")
##########   Read Weather files from SWAT output     #####################
#   save the path for the SWAT data directory
SWAT.data.dir<-c("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_forPIHM_11jun2015\\Weather\\Weather_from1981\\")
#  lkup_we38hmd.txt  to obtain Latitude, Longitude and elevation
SWAT.header<-read.csv(paste0(SWAT.data.dir,"lkup_we38hmd.txt")) [,c("LAT", "LONG" ,  "ELEVATION")]  ;
#   read the relative humidity  "hmd" time series starting date, the data series, create the time stamp for the series and add it to the time series
# get the dimensions of the "pcp" data
pcp.dim<-dim(read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T)) ;
SWAT.Date.start<-read.table (paste0(SWAT.data.dir,"we38pcp.txt"),header = F, nrows=1) ;
SWAT.Date.start.Posix<-as.Date(as.character(SWAT.Date.start),format="%Y%m%d") ;
SWAT.Data<-read.table(paste0(SWAT.data.dir,"we38pcp.txt"),header=T,col.names = c("pcp"))*10 ;
SWAT.Data$DateTime<-seq(SWAT.Date.start.Posix, by = "day", length.out = pcp.dim [1]) ;
# Read the flow output at the watershed gage in cubic meters per second cms. This is the format that was chosen for the STEWARDS watershed database
Flow<-read.csv('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\WE38_Monitored\\WE38DailyFlow.csv', header=F, as.is=T, col.names=c("PAMCWE38", "Date","Flow_cms","","Comment") ) ;
Flow$Flow_cms<-as.numeric(Flow$Flow_cms) ;
Flow$DatePosix<-as.POSIXct(Flow$Date, format="%m/%e/%Y") ;
Flow$DatePosix<-format(Flow$DatePosix,format="%Y-%m-%d %H:%M:%S" ) ;
SWAT.Data$DateTime<-format(SWAT.Data$DateTime,format="%Y-%m-%d %H:%M:%S")  ;
Flow.Data<-merge(SWAT.Data[,c("DateTime","pcp")],Flow[Flow$DatePosix >= SWAT.Date.start.Posix ,c("DatePosix","Flow_cms")], by.x="DateTime", by.y="DatePosix");
Flow.Data$DateTime<-as.POSIXct(Flow.Data$DateTime) ;
###### Plot the Hyetograph together with a hyetograph by hand and more flexible, based on the R Water Module 3
#  https://web.ics.purdue.edu/~vmerwade/rwater.html
###### set the graphical parameters right for creating the hyetograph
#There are a lof of NA values in the data set
Flow.Data.NA<-Flow.Data[is.na(Flow.Data$pcp)|is.na(Flow.Data$Flow_cms),]
# mar :A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.
par(mar=c(3,5,1,4)+0.1);
# find the range of values to be plotted
pcp.range<-range(Flow.Data$pcp) ;
flow.range<-range(Flow.Data$Flow_cms[!is.na(Flow.Data$Flow_cms)]);
DateTime.range<-range(Flow.Data$DateTime);
#  plot the pcp
plot(Flow.Data$DateTime, Flow.Data$pcp, type="h",yaxt="n",xaxt="n", ylim=rev(c(0,4*pcp.range[2])), bty="n", main="WE38",col="light blue",ylab=NA);
# add axis with proper labeling
axis(side = 3, pos = 0, tck = 0,xaxt = "n") ;
axis(side = 4, at = pretty(seq(0, floor(pcp.range[2] + 1),length=c(5))),labels=pretty(seq(0, floor(pcp.range[2] + 1),length=c(5)))) ;
mtext(side=4,paste(names(Flow.Data)[2],"mm"),line = 2, cex = 0.9, adj = 1) ;
#add flow  plot
par(new=T);
plot(Flow.Data$DateTime,Flow.Data$Flow_cms, type='l',col="blue",axes=FALSE,yaxt="n", ylab="flow cms",xlab="date", ylim =c(0, 1.2*flow.range[2]));
#add axis with appropriate labels
axis(side = 1, at=seq(DateTime.range[1],DateTime.range[2],length.out=10),labels=format(seq(DateTime.range[1],DateTime.range[2],length.out=10),"%d-%b-%y")) ;
axis(side=2,at=pretty(seq(0,floor(flow.range[2]+1),length=10))) ;
#add aditional flow data
lines(River.DateTime,River[,3],col="red")
#  C:\Felipe\PIHM-CYCLES\PIHM\PIHM_Felipe\CNS\WE-38\PIHMOutputs\WE38.1509261543\WE38.rivFlx1.txt
River<-read.table("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_Felipe\\CNS\\WE-38\\PIHMOutputs\\WE38.1509261543\\WE38.rivFlx1.txt", header=F, as.is=T, nrows=500);
River.DateTime<-as.POSIXct(River[,1],format="%Y-%m-%d %H:%M") ;
plot(River.DateTime,River[,3],type='l',ylim=c(-1,10));
for (i in seq(2,dim(River)[2])) {
points(River.DateTime,River[,i],type='l',col=i ) ;
}
